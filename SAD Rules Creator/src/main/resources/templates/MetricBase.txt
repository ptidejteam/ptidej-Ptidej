final Set <CODESMELL>ClassesFound = new HashSet();

		final HashMap mapOf<CODESMELL>Values = new HashMap();
		boolean thereIs<CODESMELL> = false;

		final Iterator iter = anAbstractLevelModel.getIteratorOnTopLevelEntities();
		while (iter.hasNext()) {
			final IEntity entity = (IEntity) iter.next();
			if (entity instanceof IClass) {
				final IClass aClass = (IClass) entity;
				thereIs<CODESMELL> = true;

				<METRIC_COMPUTING>
				//final double <METRIC> = ((IUnaryMetric) MetricsRepository.getInstance().getMetric("<METRIC>")).compute(anAbstractLevelModel, aClass);
				//mapOf<CODESMELL>Values.put(aClass, Double.valueOf(<METRIC>));
			}
		}

		if (thereIs<CODESMELL> == true) {

			BoxPlot boxPlot = new BoxPlot(mapOf<CODESMELL>Values, <FUZZINESS>);
			setBoxPlot(boxPlot);

			final Map mapOf<CODESMELL>ClassesFromBoxPlot = boxPlot.<ORDINAL_VALUE>();
			final Iterator iter3 = mapOf<CODESMELL>ClassesFromBoxPlot
				.keySet()
				.iterator();

			while (iter3.hasNext()) {
				final IClass a<CODESMELL>Class = (IClass) iter3.next();
				try {
					ClassProperty classProp = new ClassProperty(a<CODESMELL>Class);
					
					<THRESHOLD>
					final Double fuzziness = ((Double[])mapOf<CODESMELL>ClassesFromBoxPlot.get(a<CODESMELL>Class))[1];
					classProp.addProperty(new MetricProperty("<METRIC>", 
						<METRIC_VALUE>, 
						thresholdMap, fuzziness.doubleValue()));
					
					<CODESMELL>ClassesFound.add(new CodeSmell("<CODESMELL>", "", classProp));
				} catch (final Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace(ProxyConsole.getInstance().errorOutput());
				}
			}
		}

		this.setSetOfSmells(<CODESMELL>ClassesFound);