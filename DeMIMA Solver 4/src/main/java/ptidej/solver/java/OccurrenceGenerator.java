/*******************************************************************************
 * Copyright (c) 2001-2014 Yann-Gaël Guéhéneuc  and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Yann-Gaël Guéhéneuc  and others, see in file; API and its implementation
 ******************************************************************************/
package ptidej.solver.java;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Properties;

import padl.kernel.IAbstractLevelModel;
import padl.kernel.IAbstractModel;
import padl.motif.IDesignMotifModel;
import ptidej.occurrences.SolverKinds;
import ptidej.solver.java.domain.Manager;
import util.io.ProxyConsole;
import util.io.ProxyDisk;
import util.io.ReaderInputStream;

/**
 * SolutionGenerator is a unique class (Singleton)
 * which provides a unique API to call the constraint
 * solver and get a Properties file containing the
 * solutions generated by the constraint solver.
 * The location of the constraint solver and of the
 * result file are obtained from the PropertyManager
 * class.
 */
public final class OccurrenceGenerator {
	public static final int PROBLEM_AC4 = 0;
	public static final int PROBLEM_CUSTOM = 1;
	private static final String PACKAGE_NAME_PROBLEMS = "ptidej.solver.java.problem.";

	private static OccurrenceGenerator UniqueInstance;

	public static OccurrenceGenerator getInstance() {
		if (OccurrenceGenerator.UniqueInstance == null) {
			OccurrenceGenerator.UniqueInstance = new OccurrenceGenerator();
		}
		return OccurrenceGenerator.UniqueInstance;
	}

	private Properties callJavaConstraintSolver(
			final ptidej.solver.java.Problem problem, final char[] motifName,
			final IAbstractModel source, final int solver) {

		final Properties solutions = new Properties();

		try {
			final String resultFile = "ConstraintResults.ini";
			final Writer writer = ProxyDisk.getInstance()
					.fileTempOutput(resultFile);

			problem.setWriter(new PrintWriter(writer));
			if (solver == SolverKinds.SOLVER_AUTOMATIC) {
				problem.automaticSolve(true);
			}
			else if (solver == SolverKinds.SOLVER_COMBINATORIAL_AUTOMATIC) {
				problem.combinatorialAutomaticSolve(true);
			}
			else if (solver == SolverKinds.SOLVER_SIMPLE_AUTOMATIC) {
				problem.simpleAutomaticSolve(true);
			}

			solutions.load(new ReaderInputStream(
					ProxyDisk.getInstance().fileTempInput(resultFile)));
		}
		catch (final IOException e) {
			e.printStackTrace(ProxyConsole.getInstance().errorOutput());
		}

		return solutions;
	}

	private Properties callPtidejSolver4(final char[] motifName,
			final IAbstractModel source, final int solver) {

		try {
			final StringBuffer buffer = new StringBuffer();
			buffer.append(OccurrenceGenerator.PACKAGE_NAME_PROBLEMS);
			buffer.append(motifName);
			buffer.append("Motif");
			final Class<?> chosenPattern = Class.forName(buffer.toString());
			final Method problemMethod = chosenPattern.getDeclaredMethod(
					"getProblem", new Class[] { List.class });
			final ptidej.solver.java.Problem problem = (ptidej.solver.java.Problem) problemMethod
					.invoke(null, new Object[] {
							Manager.build((IAbstractLevelModel) source) });

			return this.callJavaConstraintSolver(problem, motifName, source,
					solver);
		}
		catch (final IllegalArgumentException e) {
			e.printStackTrace(ProxyConsole.getInstance().errorOutput());
		}
		catch (final ClassNotFoundException e) {
			e.printStackTrace(ProxyConsole.getInstance().errorOutput());
		}
		catch (final NoSuchMethodException e) {
			e.printStackTrace(ProxyConsole.getInstance().errorOutput());
		}
		catch (final IllegalAccessException e) {
			e.printStackTrace(ProxyConsole.getInstance().errorOutput());
		}
		catch (final InvocationTargetException e) {
			e.printStackTrace(ProxyConsole.getInstance().errorOutput());
		}

		return new Properties();
	}

	public Properties getOccurrences(final IDesignMotifModel aMotif,
			final IAbstractModel source, final int solver, final int problem) {

		return this.getOccurrences(aMotif.getName(), aMotif, source, solver,
				problem);
	}

	public Properties getOccurrences(final char[] motifName,
			final IAbstractModel source, final int solver, final int problem) {

		return this.getOccurrences(motifName, null, source, solver, problem);
	}

	private Properties getOccurrences(final char[] motifName,
			final IDesignMotifModel motif, final IAbstractModel source,
			final int solver, final int problem) {

		return this.callPtidejSolver4(motifName, source, solver);
	}
}
